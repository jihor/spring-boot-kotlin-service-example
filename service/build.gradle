import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id "java"
    id "org.springframework.boot" version "2.1.6.RELEASE"
    id "com.palantir.docker" version "0.22.1"
    id "org.jetbrains.kotlin.jvm" version "1.3.41"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.41" // includes all-open, see https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
    id "org.jetbrains.kotlin.kapt" version "1.3.41"
}

dependencies {
    kapt "org.mapstruct:mapstruct-processor:1.3.0.Final"

    implementation project(":service-model"),
            project(":service-api-soap"),
            project(":system-a-api"),
            project(":system-b-api"),
            "org.jetbrains.kotlin:kotlin-stdlib-jdk8",
            "org.jetbrains.kotlin:kotlin-reflect",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-webflux",
            "org.apache.cxf:cxf-spring-boot-starter-jaxws",
            "com.playtika.reactivefeign:feign-reactor",
            "com.playtika.reactivefeign:feign-reactor-webclient",
            "com.playtika.reactivefeign:feign-reactor-spring-configuration",
            "org.mapstruct:mapstruct",
            "javax.jws:javax.jws-api",
            "javax.xml.ws:jaxws-api",
            "com.sun.activation:javax.activation",
            "com.google.guava:guava",
            "org.apache.commons:commons-lang3",
            "io.springfox:springfox-swagger2",
            "io.springfox:springfox-swagger-ui"

    testImplementation "org.springframework.boot:spring-boot-starter-test",
            "org.skyscreamer:jsonassert",
            "org.junit.jupiter:junit-jupiter-api",
            "org.junit.jupiter:junit-jupiter-engine",
            "org.testcontainers:testcontainers"
}

ext {
    serviceName = "example-service"
}

bootJar {
    archiveName "${serviceName}.jar"
}

docker {
    name "services.docker-repo.org:5000/${dockerRepositoryName}/example-service:${artifactVersion}"
    files "build/libs/${serviceName}.jar"
    dependsOn jar, bootJar
}

dockerPush {
    enabled = publishingEnabled
}

compileJava.dependsOn(processResources)

tasks.withType(KotlinCompile) {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}